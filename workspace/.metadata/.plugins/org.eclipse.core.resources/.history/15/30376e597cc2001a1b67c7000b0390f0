package com.laptrinhjavaweb.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.laptrinhjavaweb.converter.NewConverter;
import com.laptrinhjavaweb.dto.NewDTO;
import com.laptrinhjavaweb.entity.CategoryEntity;
import com.laptrinhjavaweb.entity.NewEntity;
import com.laptrinhjavaweb.repository.CategoryRepository;
import com.laptrinhjavaweb.repository.NewRepository;
import com.laptrinhjavaweb.service.INewService;

@Service
public class NewService implements INewService {

	//cơ chế nhúng để gọi NewConverter, thay thì gọi cơ chế nhúng DJ thì ta có thể khởi tạo bằng từ
	//khóa new cho class NewConverter, nhưng thay vì đó để tiết kiệm và sử dụng nhanh chóng ta dùng cơ
	//chế nhúng để gọi NewConverter bất kì lúc nào cũng được, không cần thiết khởi tạo đối tượng.
	
	@Autowired NewRepository newRepository;
	
	@Autowired NewConverter newConverter;
	
	@Autowired CategoryRepository categoryRepository;
	
	@Override
	public List<NewDTO> findAll(Pageable pageable) {
		List<NewDTO> result = new ArrayList<>();
		List<NewEntity> entities = newRepository.findAll(pageable).getContent();
		for (NewEntity item : entities) {
			NewDTO newDTO = newConverter.toDTO(item);
			result.add(newDTO);
		}
		return result;
	}

	@Override
	public int getTotalItem() {
		//câu lệnh dưới tương tương câu lệnh - SELECT count(*) from new
		return (int)newRepository.count();
	}

	@Override
	public NewDTO findById(long id) {
		NewEntity newEntity = newRepository.findOne(id);
		NewDTO newDTO = newConverter.toDTO(newEntity);
		return newDTO;
	}

	@Override
	@Transactional
	public NewDTO save(NewDTO newDTO) {
		NewDTO dto = new NewDTO();
		CategoryEntity categoryEntity = categoryRepository.findOneByCode(newDTO.getCategoryCode());
		NewEntity newEntity = newConverter.toEntity(newDTO);
		newEntity.setCategoryEntity(categoryEntity);
		newEntity = newRepository.save(newEntity);
		dto = newConverter.toDTO(newEntity);
		return dto;
	}

	@Override
	@Transactional
	public NewDTO update(NewDTO newDTO) {
		NewDTO dto = new NewDTO();
		NewEntity newEntity = newRepository.findOne(newDTO.getId());
		CategoryEntity categoryEntity = categoryRepository.findOneByCode(newDTO.getCategoryCode());
		newEntity = newConverter.toEntity(newDTO);
		newEntity.setCategoryEntity(categoryEntity);
		newEntity = newRepository.save(newEntity);
		dto = newConverter.toDTO(newEntity);
		return dto;
	}

}
